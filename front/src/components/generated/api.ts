/* tslint:disable */
/* eslint-disable */
/**
 * Civic API
 * Civic API description
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateWorkDTO
 */
export interface CreateWorkDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkDTO
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkDTO
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateWorkDTO
     */
    'isShow': boolean;
}
/**
 * 
 * @export
 * @interface UpdateWorkDTO
 */
export interface UpdateWorkDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkDTO
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateWorkDTO
     */
    'isShow'?: boolean;
}
/**
 * 
 * @export
 * @interface WorkEntity
 */
export interface WorkEntity {
    /**
     * 
     * @type {number}
     * @memberof WorkEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WorkEntity
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof WorkEntity
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkEntity
     */
    'isShow': boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkEntity
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof WorkEntity
     */
    'updated_at': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: any): AxiosPromise<void> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorkApi - axios parameter creator
 * @export
 */
export const WorkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateWorkDTO} createWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWork: async (createWorkDTO: CreateWorkDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkDTO' is not null or undefined
            assertParamExists('createWork', 'createWorkDTO', createWorkDTO)
            const localVarPath = `/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWork: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWork', 'id', id)
            const localVarPath = `/work/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWork: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWork', 'id', id)
            const localVarPath = `/work/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkDTO} updateWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWork: async (id: number, updateWorkDTO: UpdateWorkDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWork', 'id', id)
            // verify required parameter 'updateWorkDTO' is not null or undefined
            assertParamExists('updateWork', 'updateWorkDTO', updateWorkDTO)
            const localVarPath = `/work/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkApi - functional programming interface
 * @export
 */
export const WorkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateWorkDTO} createWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWork(createWorkDTO: CreateWorkDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWork(createWorkDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWork(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWork(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWork(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWork(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkDTO} updateWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWork(id: number, updateWorkDTO: UpdateWorkDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWork(id, updateWorkDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkApi - factory interface
 * @export
 */
export const WorkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateWorkDTO} createWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWork(createWorkDTO: CreateWorkDTO, options?: any): AxiosPromise<WorkEntity> {
            return localVarFp.createWork(createWorkDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWork(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWork(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWork(id: number, options?: any): AxiosPromise<WorkEntity> {
            return localVarFp.getWork(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorks(options?: any): AxiosPromise<Array<WorkEntity>> {
            return localVarFp.getWorks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkDTO} updateWorkDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWork(id: number, updateWorkDTO: UpdateWorkDTO, options?: any): AxiosPromise<WorkEntity> {
            return localVarFp.updateWork(id, updateWorkDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkApi - object-oriented interface
 * @export
 * @class WorkApi
 * @extends {BaseAPI}
 */
export class WorkApi extends BaseAPI {
    /**
     * 
     * @param {CreateWorkDTO} createWorkDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApi
     */
    public createWork(createWorkDTO: CreateWorkDTO, options?: AxiosRequestConfig) {
        return WorkApiFp(this.configuration).createWork(createWorkDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApi
     */
    public deleteWork(id: number, options?: AxiosRequestConfig) {
        return WorkApiFp(this.configuration).deleteWork(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApi
     */
    public getWork(id: number, options?: AxiosRequestConfig) {
        return WorkApiFp(this.configuration).getWork(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApi
     */
    public getWorks(options?: AxiosRequestConfig) {
        return WorkApiFp(this.configuration).getWorks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateWorkDTO} updateWorkDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApi
     */
    public updateWork(id: number, updateWorkDTO: UpdateWorkDTO, options?: AxiosRequestConfig) {
        return WorkApiFp(this.configuration).updateWork(id, updateWorkDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


